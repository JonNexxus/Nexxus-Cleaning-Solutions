name: Branch Protection

on:
  pull_request:
    branches: [ master, main ]
    types: [opened, synchronize, reopened]

jobs:
  # Job 1: PR Title and Description Check
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Check PR title format
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
          requireScope: false
          disallowScopes: |
            release
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            didn't match the configured pattern. Please ensure that the subject
            doesn't start with an uppercase character.

      - name: Check PR has description
        uses: actions/github-script@v6
        with:
          script: |
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            
            if (!pullRequest.body || pullRequest.body.trim().length < 10) {
              core.setFailed('Pull request must have a description with at least 10 characters');
            }

  # Job 2: Code Quality Gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for TODO/FIXME comments
        run: |
          if grep -r "TODO\|FIXME" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" apps/ packages/; then
            echo "‚ùå Found TODO/FIXME comments. Please resolve them before merging."
            exit 1
          else
            echo "‚úÖ No TODO/FIXME comments found."
          fi

      - name: Check for console.log statements
        run: |
          if grep -r "console\.log" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" apps/ packages/ --exclude-dir=node_modules; then
            echo "‚ùå Found console.log statements. Please remove them before merging."
            exit 1
          else
            echo "‚úÖ No console.log statements found."
          fi

      - name: Check bundle size
        run: |
          npm run build
          npx bundlesize
        continue-on-error: true

  # Job 3: Security Checks
  security-checks:
    name: Security Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for hardcoded secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  # Job 4: Dependency Check
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Check for outdated dependencies
        run: |
          npm outdated || true
          echo "‚ÑπÔ∏è Check above for outdated dependencies"

      - name: Check for duplicate dependencies
        run: |
          npx npm-check-duplicates
        continue-on-error: true

      - name: License compliance check
        run: |
          npx license-checker --summary
        continue-on-error: true

  # Job 5: Performance Budget
  performance-budget:
    name: Performance Budget
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build applications
        run: npm run build

      - name: Check bundle size
        run: |
          echo "üìä Bundle Size Analysis"
          echo "======================"
          
          # Web app bundle size
          WEB_SIZE=$(du -sh apps/web/.next/static | cut -f1)
          echo "Web App Bundle: $WEB_SIZE"
          
          # Admin app bundle size  
          ADMIN_SIZE=$(du -sh apps/admin/.next/static | cut -f1)
          echo "Admin App Bundle: $ADMIN_SIZE"
          
          # Check if bundle size exceeds limits (example: 5MB)
          WEB_SIZE_BYTES=$(du -sb apps/web/.next/static | cut -f1)
          ADMIN_SIZE_BYTES=$(du -sb apps/admin/.next/static | cut -f1)
          
          MAX_SIZE=5242880  # 5MB in bytes
          
          if [ $WEB_SIZE_BYTES -gt $MAX_SIZE ]; then
            echo "‚ùå Web app bundle size ($WEB_SIZE) exceeds 5MB limit"
            exit 1
          fi
          
          if [ $ADMIN_SIZE_BYTES -gt $MAX_SIZE ]; then
            echo "‚ùå Admin app bundle size ($ADMIN_SIZE) exceeds 5MB limit"
            exit 1
          fi
          
          echo "‚úÖ Bundle sizes are within acceptable limits"

  # Job 6: Code Coverage Check
  coverage-check:
    name: Code Coverage Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test -- --coverage
        env:
          NEXT_PUBLIC_SUPABASE_URL: 'https://mock-supabase-url.supabase.co'
          NEXT_PUBLIC_SUPABASE_ANON_KEY: 'mock-anon-key'

      - name: Check coverage thresholds
        run: |
          echo "üìä Code Coverage Report"
          echo "======================"
          
          # This would typically be handled by Jest configuration
          # but we can add additional checks here if needed
          
          if [ -f coverage/lcov-report/index.html ]; then
            echo "‚úÖ Coverage report generated successfully"
          else
            echo "‚ùå Coverage report not found"
            exit 1
          fi

  # Job 7: Final Status Check
  pr-ready:
    name: PR Ready for Review
    runs-on: ubuntu-latest
    needs: [pr-validation, quality-gates, security-checks, dependency-check, performance-budget, coverage-check]
    if: always()
    
    steps:
      - name: Check all jobs status
        uses: actions/github-script@v6
        with:
          script: |
            const jobs = [
              '${{ needs.pr-validation.result }}',
              '${{ needs.quality-gates.result }}', 
              '${{ needs.security-checks.result }}',
              '${{ needs.dependency-check.result }}',
              '${{ needs.performance-budget.result }}',
              '${{ needs.coverage-check.result }}'
            ];
            
            const failedJobs = jobs.filter(job => job === 'failure');
            const skippedJobs = jobs.filter(job => job === 'skipped');
            
            if (failedJobs.length > 0) {
              core.setFailed(`‚ùå ${failedJobs.length} job(s) failed. Please fix the issues before merging.`);
            } else if (skippedJobs.length === jobs.length) {
              console.log('‚ÑπÔ∏è All jobs were skipped');
            } else {
              console.log('‚úÖ All quality gates passed! PR is ready for review.');
            }

      - name: Add PR comment
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚ùå **Quality gates failed!** Please check the failed jobs and fix the issues before requesting a review.'
            })

      - name: Add success comment
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚úÖ **All quality gates passed!** This PR is ready for review. üöÄ'
            })
